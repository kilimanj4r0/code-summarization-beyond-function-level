{"method_id": "ClassEval_61_3", "method_code": "def stop(self):\n        if self.current_song:\n            self.current_song = None\n            return True\n        else:\n            return False", "method_summary": "Stops the current song in the playlist."}
{"method_id": "ClassEval_95_5", "method_code": "def track_order(self, order_id):\n        if order_id in self.orders:\n            return self.orders[order_id]['status']\n        else:\n            return False", "method_summary": "Get the status of specific order."}
{"method_id": "ClassEval_20_1", "method_code": "def remove_user(self, username):\n        if username in self.users:\n            del self.users[username]\n            return True\n        else:\n            return False", "method_summary": "Remove a user from the Chat."}
{"method_id": "ClassEval_8_0", "method_code": "def deposit(self, amount):\n        if amount < 0:\n            raise ValueError(\"Invalid amount\")\n        self.balance += amount\n        return self.balance", "method_summary": "Deposits a certain amount into the account, increasing the account balance, return the current account balance. If amount is negative, raise a ValueError(\"Invalid amount\")."}
{"method_id": "ClassEval_94_1", "method_code": "def insert_coin(self, amount):\n        self.balance += amount\n        return self.balance", "method_summary": "Inserts coins into the vending machine."}
{"method_id": "ClassEval_95_1", "method_code": "def update_product_quantity(self, product_id, quantity):\n        if product_id in self.inventory:\n            self.inventory[product_id]['quantity'] += quantity", "method_summary": "According to product_id, add the quantity to the corresponding product in inventory."}
{"method_id": "ClassEval_99_1", "method_code": "def extract_all(self, output_path):\n        try:\n            with zipfile.ZipFile(self.file_name, 'r') as zip_file:\n                zip_file.extractall(output_path)\n            return True\n        except:\n            return False", "method_summary": "Extract all zip files and place them in the specified path"}
{"method_id": "ClassEval_72_6", "method_code": "def generate_split_sentences_pattern(self):\n        pattern = r'[.!?][\\s]{1,2}(?=[A-Z])'\n        return pattern", "method_summary": "Generate regular expression patterns that match the middle characters of two sentences"}
{"method_id": "ClassEval_29_0", "method_code": "def mean(self, data):\n        return round(sum(data) / len(data), 2)", "method_summary": "Calculate the average value of a group of data, accurate to two digits after the Decimal separator"}
{"method_id": "ClassEval_65_2", "method_code": "def trans_two(self, s):\n        s = s.zfill(2)\n        if s[0] == \"0\":\n            return self.NUMBER[int(s[-1])]\n        elif s[0] == \"1\":\n            return self.NUMBER_TEEN[int(s) - 10]\n        elif s[1] == \"0\":\n            return self.NUMBER_TEN[int(s[0]) - 1]\n        else:\n            return self.NUMBER_TEN[int(s[0]) - 1] + \" \" + self.NUMBER[int(s[-1])]", "method_summary": "Converts a two-digit number into words format"}
